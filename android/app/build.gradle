def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define x_dummy_database.location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    // BLDRS_APP_VERSION
    flutterVersionCode = '2171'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    // BLDRS_APP_VERSION
    flutterVersionName = '2.17.1'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 34
    buildToolsVersion "29.0.0"

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "Instantiatable"
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        // NOTE : Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "net.bldrs.app"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    allprojects {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }}

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
    // FIREBASE ANALYTICS
//    implementation 'com.google.firebase:firebase-analytics'
    // USED FOR APP CHECK SHIT
    implementation platform('com.google.firebase:firebase-bom:31.1.0')
    /// USED FOR APP CHECK FUCK
    implementation 'com.google.firebase:firebase-appcheck-playintegrity'
    /// USED FOR GOOGLE ADS
    implementation 'com.google.android.gms:play-services-ads:21.4.0'
    // USED FOR GOOGLE SIGN IN
    implementation 'com.google.android.gms:play-services-auth:19.2.0'
    // USED_FOR_FACEBOOK_AUTH
    implementation 'com.facebook.android:facebook-android-sdk:latest.release'
}

