import 'package:bldrs/views/widgets/dialogs/alert_dialog.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
// === === === === === === === === === === === === === === === === === === ===
class FireStoreCollection{
  static const String users = 'users';
  static const String tinyUsers = 'tinyUsers';
  static const String subUserAsks = 'asks' ;
  static const String subUserSaves = 'saves';

  static const String countries = 'countries';

  static const String asks = 'asks';
  static const String subAskChats = 'chats';
  static const String subAskCounters = 'counters';

  static const String bzz = 'bzz';
  static const String tinyBzz = 'tinyBzz';
  static const String subBzCounters = 'counters';
  static const String subBzFollows = 'follows';
  static const String subBzCalls = 'calls';
  static const String subBzChats = 'chats';

  static const String flyers = 'flyers';
  static const String tinyFlyers = 'tinyFlyers';
  static const String flyersKeys = 'flyersKeys';
  static const String subFlyerCounters = 'counters';
  static const String subFlyerSaves = 'saves';
  static const String subFlyerShares = 'shares';
  static const String subFlyerViews = 'views';
}
// ---------------------------------------------------------------------------
CollectionReference getFirestoreCollectionReference (String collectionName){
  final FirebaseFirestore _fireInstance = FirebaseFirestore.instance;
  CollectionReference _collection = _fireInstance.collection(collectionName);
  return _collection;
}
// ---------------------------------------------------------------------------
DocumentReference getFirestoreDocumentReference (String collectionName, String documentName){
  CollectionReference _collection = getFirestoreCollectionReference(collectionName);
  DocumentReference _doc =  _collection.doc(documentName);
  return _doc;
}
// ---------------------------------------------------------------------------
Future<void> updateFieldOnFirestore({
  BuildContext context ,
  String collectionName,
  String documentName,
  String field,
  dynamic input
}) async {
  DocumentReference _doc =  getFirestoreDocumentReference(collectionName, documentName);

  // if (){}else if(){}else{}
  try {

    await _doc.update({field : input});

    // await superDialog(context, 'Successfully updated\n$collectionName\\$documentName\\$field to :\n"$input"','Success');

  } catch(error) {
    superDialog(context, error, 'Ops !');
  }

}
// ---------------------------------------------------------------------------
Stream<QuerySnapshot> getFirestoreCollectionSnapshots(String collectionName){
  CollectionReference _collection = getFirestoreCollectionReference(collectionName);
  Stream<QuerySnapshot> _snapshots = _collection.snapshots();
  return _snapshots;
}
// ---------------------------------------------------------------------------
Stream<DocumentSnapshot> getFirestoreDocumentSnapshots(String collectionName, String documentName){
  DocumentReference _document = getFirestoreDocumentReference(collectionName, documentName);
  Stream<DocumentSnapshot> _snapshots = _document.snapshots();
  return _snapshots;
}
// ---------------------------------------------------------------------------
Future<dynamic> getFireStoreDocumentMap({BuildContext context, String collectionName, String documentName}) async {

  Map<String, dynamic> _map; //QueryDocumentSnapshot

  await tryAndCatch(
    context: context,
    functions: () async {

      final DocumentReference _document = getFirestoreDocumentReference(collectionName, documentName);

      await _document.get().then<dynamic>((DocumentSnapshot snapshot) async{
        _map = snapshot.data();
      });

    },
  );


  return _map;
}
// ---------------------------------------------------------------------------
Future<List<QueryDocumentSnapshot>> getFireStoreCollectionMaps(String collectionName) async {
  QuerySnapshot querySnapshot = await FirebaseFirestore.instance.collection(collectionName).get();
  List<QueryDocumentSnapshot> _maps = querySnapshot.docs;
  return _maps;
}
// ---------------------------------------------------------------------------
/// TASK : GETTING ALL SUBCOLLECTION MAPS not tested
Future<List<QueryDocumentSnapshot>> getFireStoreSubCollectionMaps(
    {String collectionName, String docName, String subCollectionName}) async {

  final CollectionReference _subCollection = FirebaseFirestore.instance
      .collection('$collectionName/$docName/$subCollectionName');

  QuerySnapshot querySnapshot = await _subCollection.get();
  List<QueryDocumentSnapshot> _maps = querySnapshot.docs;
  return _maps;
}
// ---------------------------------------------------------------------------
/// creates firestore doc with autogenerated ID then returns doc reference
Future<DocumentReference> createFireStoreDocument({
  BuildContext context,
  String collectionName,
  Map<String, dynamic> input,
}) async {

  DocumentReference _docRef;

  await tryAndCatch(
    context: context,
    functions: () async {

      final CollectionReference _bzCollectionRef =
      getFirestoreCollectionReference(collectionName);

      _docRef = _bzCollectionRef.doc();

      await _docRef.set(input);

    }
  );

  return _docRef;
}
// ---------------------------------------------------------------------------
Future<DocumentReference> createFireStoreNamedDocument({
  BuildContext context,
  String collectionName,
  String docName,
  Map<String, dynamic> input,
}) async {

  DocumentReference _docRef;

  await tryAndCatch(
      context: context,
      functions: () async {

        final CollectionReference _collectionReference =
        getFirestoreCollectionReference(collectionName);

        _docRef = _collectionReference.doc(docName);

        await _docRef.set(input);


      }
  );

  return _docRef;
}
// ---------------------------------------------------------------------------
Future<void> replaceFirestoreDocument({
  BuildContext context,
  String collectionName,
  String docName,
  Map<String, dynamic> input,
}) async {

  await tryAndCatch(
    context: context,
    functions: () async {

      CollectionReference _collectionReference = getFirestoreCollectionReference(collectionName);

      await _collectionReference.doc(docName).set(input);

    }
  );
}
// ---------------------------------------------------------------------------
/// creates a new sub doc and new sub collection if didn't exists
/// and uses the same directory i existed to add a new doc
/// updates the sub doc if existed
/// and creates random for sub doc if sub doc name is null
Future<DocumentReference> insertFireStoreSubDocument({
  BuildContext context,
  String collectionName,
  String docName,
  String subCollectionName,
  String subDocName,
  dynamic input,
}) async {

  DocumentReference _subDocRef;

  await tryAndCatch(
      context: context,
      functions: () async {

        final CollectionReference _collectionRef =
        getFirestoreCollectionReference(collectionName);

        _subDocRef = _collectionRef.doc(docName).collection(subCollectionName).doc(subDocName);

        await _subDocRef.set(input);

      }
  );

  return _subDocRef;
}
// ---------------------------------------------------------------------------
Future<dynamic> getFireStoreDocumentField({BuildContext context, String collectionName, String documentName, String fieldName}) async {

  dynamic _map;

  tryAndCatch(
    context: context,
    functions: () async {
      _map = await getFireStoreDocumentMap(
        context: context,
        collectionName: collectionName,
        documentName: documentName,
      );

    }
  );

  return _map[fieldName];
}
// ---------------------------------------------------------------------------
Future<void> deleteDocumentOnFirestore({BuildContext context, String collectionName, String documentName,}) async {

  await tryAndCatch(
    context: context,
    functions: () async {
      DocumentReference _doc = getFirestoreDocumentReference(collectionName, documentName);
      await _doc.delete();
    }
  );
}
// ---------------------------------------------------------------------------


